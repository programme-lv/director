syntax = "proto3";

option go_package = "github.com/programme-lv/director/msg";
package msg;

service Director {
  rpc EvaluateSubmission (EvaluationRequest) returns (stream EvaluationFeedback) {}
}

message EvaluationRequest {
  string submission = 1;
  ProgrammingLanguage language = 2;
  RuntimeLimits limits = 3;
  string evalType = 4;
  repeated Test tests = 5;
  string testlibChecker = 6;
}

message Test {
    int64 id = 1;
    string inSha256 = 2;
    optional string inDownloadUrl = 3;
    optional string inContent = 4;
    string ansSha256 = 5;
    optional string ansDownloadUrl = 6;
    optional string ansContent = 7;
}

message ProgrammingLanguage {
    string id = 1;
    string name = 2;
    string codeFilename = 3;
    optional string compileCmd = 4;
    optional string compiledFilename = 5;
    string executeCmd = 6;
}

message RuntimeLimits {
    int64 CPUTimeMillis = 1;
    int64 memKibiBytes = 2;
}

message EvaluationFeedback {
    oneof feedback_types {
        StartEvaluation startEvaluation = 1;
        FinishEvaluation finishEvaluation = 2;
        FinishWithInernalServerError finishWithInernalServerError = 3;
        StartCompilation startCompilation = 4;
        FinishCompilation finishCompilation = 5;
        FinishWithCompilationError finishWithCompilationError = 6;
        StartTesting startTesting = 7;
        IgnoreTest ignoreTest = 8;
        StartTest startTest = 9;
        ReportTestSubmissionRuntimeData reportTestSubmissionRuntimeData = 10;
        FinishTestWithLimitExceeded finishTestWithLimitExceeded = 11;
        FinishTestWithRuntimeError finishTestWithRuntimeError = 12;
        ReportTestCheckerRuntimeData reportTestCheckerRuntimeData = 13;
        FinishTestWithVerdictAccepted finishTestWithVerdictAccepted = 14;
        FinishTestWithVerdictWrongAnswer finishTestWithVerdictWrongAnswer = 15;
        IncrementScore incrementScore = 16;
    }
}

message StartEvaluation {}
message FinishEvaluation {}
message FinishWithInernalServerError {
    string errorMsg = 1;
}

message StartCompilation {}
message FinishCompilation {
    RuntimeData compilationRData = 1;
}
message FinishWithCompilationError {}

message StartTesting {
    int64 maxScore = 1;
}
message IgnoreTest {
    int64 testId = 1;
}

message StartTest {
    int64 testId = 1;
}
message ReportTestSubmissionRuntimeData {
    int64 testId = 1;
    RuntimeData rData = 2;
}

message FinishTestWithLimitExceeded {
    int64 testId = 1;
    bool isCPUTimeExceeded = 2;
    bool memoryLimitExceeded = 3;
    bool idlenessLimitExceeded = 4;
}

message FinishTestWithRuntimeError {
    int64 testId = 1;
}

message ReportTestCheckerRuntimeData {
    RuntimeData rData = 1;
    int64 testId = 2;
}

message FinishTestWithVerdictAccepted {
    int64 testId = 1;
}

message FinishTestWithVerdictWrongAnswer {
    int64 testId = 1;
}

message IncrementScore {
    int64 delta = 1;
}

message RuntimeData {
    string stdout = 1;
    string stderr = 2;
    int64 exitCode = 3;
    int64 cpuTimeMillis = 4;
    int64 wallTimeMillis = 5;
    int64 memKibiBytes = 6;
}